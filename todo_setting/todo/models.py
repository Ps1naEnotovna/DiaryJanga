from django.db import models


class TaskType(models.Model):
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=32)
    rating = models.IntegerField('–†–µ–π—Ç–∏–Ω–≥', default=0)
    updated_at = models.DateTimeField('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', auto_now=True)

    def __str__(self):
        return self.name

    class Meta:
        db_table = 'task_types'
        verbose_name = '—Ç–∏–ø –∑–∞–¥–∞—á–∏'
        verbose_name_plural = '–¢–∏–ø—ã –∑–∞–¥–∞—á–∏'


class Task(models.Model):
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=64)
    text = models.TextField('–¢–µ–∫—Å—Ç')
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)
    updated_at = models.DateTimeField('–û–±–Ω–æ–≤–ª–µ–Ω–æ', auto_now=True)
    is_solved = models.BooleanField('–†–µ—à–µ–Ω–æ?', default=False)
    expected_time = models.DateTimeField('–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è')
    task_type = models.ForeignKey(TaskType, on_delete=models.SET_NULL, null=True, verbose_name='–¢–∏–ø')
    rating = models.IntegerField('–†–µ–π—Ç–∏–Ω–≥', default=0)

    def __str__(self):
        return self.name + (' üåù' if self.is_solved else ' üåö')

    class Meta:
        db_table = 'tasks'
        verbose_name = '–∑–∞–¥–∞—á—É'
        verbose_name_plural = '–ó–∞–¥–∞—á–∏'
